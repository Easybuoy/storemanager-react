// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Login /> renders the Login component correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    auth={
      Object {
        "addMatchers": [Function],
        "advanceTimersByTime": [Function],
        "autoMockOff": [Function],
        "autoMockOn": [Function],
        "clearAllMocks": [Function],
        "clearAllTimers": [Function],
        "deepUnmock": [Function],
        "disableAutomock": [Function],
        "doMock": [Function],
        "dontMock": [Function],
        "enableAutomock": [Function],
        "fn": [Function],
        "genMockFromModule": [Function],
        "isMockFunction": [Function],
        "mock": [Function],
        "requireActual": [Function],
        "requireMock": [Function],
        "resetAllMocks": [Function],
        "resetModuleRegistry": [Function],
        "resetModules": [Function],
        "restoreAllMocks": [Function],
        "retryTimes": [Function],
        "runAllImmediates": [Function],
        "runAllTicks": [Function],
        "runAllTimers": [Function],
        "runOnlyPendingTimers": [Function],
        "runTimersToTime": [Function],
        "setMock": [Function],
        "setTimeout": [Function],
        "spyOn": [Function],
        "unmock": [Function],
        "useFakeTimers": [Function],
        "useRealTimers": [Function],
      }
    }
    errors={
      Object {
        "addMatchers": [Function],
        "advanceTimersByTime": [Function],
        "autoMockOff": [Function],
        "autoMockOn": [Function],
        "clearAllMocks": [Function],
        "clearAllTimers": [Function],
        "deepUnmock": [Function],
        "disableAutomock": [Function],
        "doMock": [Function],
        "dontMock": [Function],
        "enableAutomock": [Function],
        "fn": [Function],
        "genMockFromModule": [Function],
        "isMockFunction": [Function],
        "mock": [Function],
        "requireActual": [Function],
        "requireMock": [Function],
        "resetAllMocks": [Function],
        "resetModuleRegistry": [Function],
        "resetModules": [Function],
        "restoreAllMocks": [Function],
        "retryTimes": [Function],
        "runAllImmediates": [Function],
        "runAllTicks": [Function],
        "runAllTimers": [Function],
        "runOnlyPendingTimers": [Function],
        "runTimersToTime": [Function],
        "setMock": [Function],
        "setTimeout": [Function],
        "spyOn": [Function],
        "unmock": [Function],
        "useFakeTimers": [Function],
        "useRealTimers": [Function],
      }
    }
    history={
      Object {
        "push": [MockFunction],
      }
    }
    signIn={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="loginbox"
      >
        <img
          className="avatar"
          src="https://store--manager.herokuapp.com/assets/uploads/users/default-avatar.png"
        />
        <h2
          className="text-center"
        >
          Login to access store manager
        </h2>
        <form
          onSubmit={[Function]}
        >
          <p>
            Email
          </p>
          <input
            id="loginusername"
            name="email"
            onChange={[Function]}
            placeholder="Enter Email"
            type="text"
          />
          <p>
            Password
          </p>
          <input
            id="loginpassword"
            name="password"
            onChange={[Function]}
            placeholder="Enter Password"
            type="password"
          />
          <input
            id="loginsubmit"
            name="submit"
            type="submit"
            value="Login"
          />
        </form>
      </div>,
      "id": "loginbody",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <img
            className="avatar"
            src="https://store--manager.herokuapp.com/assets/uploads/users/default-avatar.png"
          />,
          <h2
            className="text-center"
          >
            Login to access store manager
          </h2>,
          <form
            onSubmit={[Function]}
          >
            <p>
              Email
            </p>
            <input
              id="loginusername"
              name="email"
              onChange={[Function]}
              placeholder="Enter Email"
              type="text"
            />
            <p>
              Password
            </p>
            <input
              id="loginpassword"
              name="password"
              onChange={[Function]}
              placeholder="Enter Password"
              type="password"
            />
            <input
              id="loginsubmit"
              name="submit"
              type="submit"
              value="Login"
            />
          </form>,
        ],
        "className": "loginbox",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "avatar",
            "src": "https://store--manager.herokuapp.com/assets/uploads/users/default-avatar.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Login to access store manager",
            "className": "text-center",
          },
          "ref": null,
          "rendered": "Login to access store manager",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p>
                Email
              </p>,
              <input
                id="loginusername"
                name="email"
                onChange={[Function]}
                placeholder="Enter Email"
                type="text"
              />,
              <p>
                Password
              </p>,
              <input
                id="loginpassword"
                name="password"
                onChange={[Function]}
                placeholder="Enter Password"
                type="password"
              />,
              <input
                id="loginsubmit"
                name="submit"
                type="submit"
                value="Login"
              />,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Email",
              },
              "ref": null,
              "rendered": "Email",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "id": "loginusername",
                "name": "email",
                "onChange": [Function],
                "placeholder": "Enter Email",
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Password",
              },
              "ref": null,
              "rendered": "Password",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "id": "loginpassword",
                "name": "password",
                "onChange": [Function],
                "placeholder": "Enter Password",
                "type": "password",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "id": "loginsubmit",
                "name": "submit",
                "type": "submit",
                "value": "Login",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="loginbox"
        >
          <img
            className="avatar"
            src="https://store--manager.herokuapp.com/assets/uploads/users/default-avatar.png"
          />
          <h2
            className="text-center"
          >
            Login to access store manager
          </h2>
          <form
            onSubmit={[Function]}
          >
            <p>
              Email
            </p>
            <input
              id="loginusername"
              name="email"
              onChange={[Function]}
              placeholder="Enter Email"
              type="text"
            />
            <p>
              Password
            </p>
            <input
              id="loginpassword"
              name="password"
              onChange={[Function]}
              placeholder="Enter Password"
              type="password"
            />
            <input
              id="loginsubmit"
              name="submit"
              type="submit"
              value="Login"
            />
          </form>
        </div>,
        "id": "loginbody",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <img
              className="avatar"
              src="https://store--manager.herokuapp.com/assets/uploads/users/default-avatar.png"
            />,
            <h2
              className="text-center"
            >
              Login to access store manager
            </h2>,
            <form
              onSubmit={[Function]}
            >
              <p>
                Email
              </p>
              <input
                id="loginusername"
                name="email"
                onChange={[Function]}
                placeholder="Enter Email"
                type="text"
              />
              <p>
                Password
              </p>
              <input
                id="loginpassword"
                name="password"
                onChange={[Function]}
                placeholder="Enter Password"
                type="password"
              />
              <input
                id="loginsubmit"
                name="submit"
                type="submit"
                value="Login"
              />
            </form>,
          ],
          "className": "loginbox",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "avatar",
              "src": "https://store--manager.herokuapp.com/assets/uploads/users/default-avatar.png",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Login to access store manager",
              "className": "text-center",
            },
            "ref": null,
            "rendered": "Login to access store manager",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p>
                  Email
                </p>,
                <input
                  id="loginusername"
                  name="email"
                  onChange={[Function]}
                  placeholder="Enter Email"
                  type="text"
                />,
                <p>
                  Password
                </p>,
                <input
                  id="loginpassword"
                  name="password"
                  onChange={[Function]}
                  placeholder="Enter Password"
                  type="password"
                />,
                <input
                  id="loginsubmit"
                  name="submit"
                  type="submit"
                  value="Login"
                />,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Email",
                },
                "ref": null,
                "rendered": "Email",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "loginusername",
                  "name": "email",
                  "onChange": [Function],
                  "placeholder": "Enter Email",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Password",
                },
                "ref": null,
                "rendered": "Password",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "loginpassword",
                  "name": "password",
                  "onChange": [Function],
                  "placeholder": "Enter Password",
                  "type": "password",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "loginsubmit",
                  "name": "submit",
                  "type": "submit",
                  "value": "Login",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
